{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1kNi8n4TLfZYqXD5IvnRjH5FvGf39NtvB","timestamp":1678736509425},{"file_id":"1lDwKZYjOaAeP1OIhEqVyQKIKVAArIPFQ","timestamp":1677601006972}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install dgl"],"metadata":{"id":"vwzoA7pc7Ru1","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1678742330853,"user_tz":-330,"elapsed":7275,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"outputId":"3ef3944d-3208-423c-a041-46576a38a546"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting dgl\n","  Downloading dgl-1.0.1-cp39-cp39-manylinux1_x86_64.whl (5.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.4/5.4 MB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.9/dist-packages (from dgl) (2.25.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from dgl) (4.65.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.9/dist-packages (from dgl) (1.10.1)\n","Requirement already satisfied: networkx>=2.1 in /usr/local/lib/python3.9/dist-packages (from dgl) (3.0)\n","Collecting psutil>=5.8.0\n","  Downloading psutil-5.9.4-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (280 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m280.2/280.2 KB\u001b[0m \u001b[31m32.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.9/dist-packages (from dgl) (1.22.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests>=2.19.0->dgl) (2.10)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests>=2.19.0->dgl) (1.26.14)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests>=2.19.0->dgl) (2022.12.7)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.9/dist-packages (from requests>=2.19.0->dgl) (4.0.0)\n","Installing collected packages: psutil, dgl\n","  Attempting uninstall: psutil\n","    Found existing installation: psutil 5.4.8\n","    Uninstalling psutil-5.4.8:\n","      Successfully uninstalled psutil-5.4.8\n","Successfully installed dgl-1.0.1 psutil-5.9.4\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["psutil"]}}},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"oJyd7FY6_cFa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Dependencies"],"metadata":{"id":"wjNRn5fB_ctw"}},{"cell_type":"code","source":["import torch\n","import dgl\n","from collections import namedtuple\n","import dgl.function as fn\n","from copy import deepcopy as dc\n","import random\n","import time\n","from time import time\n","from torch.utils.data import DataLoader\n","import numpy as np\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"VJ4QvIIF7xbb","executionInfo":{"status":"ok","timestamp":1678745680843,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":85,"outputs":[]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"OYWBA7fY3KyE"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","class QNetwork(nn.Module):\n","    \"\"\"Actor (Policy) Model.\"\"\"\n","\n","    def __init__(self, state_size, action_size, seed, fc1_units=64, fc2_units=64):\n","        \"\"\"Initialize parameters and build model.\n","        Params\n","        ======\n","            state_size (int): Dimension of each state\n","            action_size (int): Dimension of each action\n","            seed (int): Random seed\n","            fc1_units (int): Number of nodes in first hidden layer\n","            fc2_units (int): Number of nodes in second hidden layer\n","        \"\"\"\n","        super(QNetwork, self).__init__()\n","        self.seed = torch.manual_seed(seed)\n","        self.fc1 = nn.Linear(state_size, fc1_units)\n","        self.fc2 = nn.Linear(fc1_units, fc2_units)\n","        self.fc3 = nn.Linear(fc2_units, action_size)\n","\n","    def forward(self, state):\n","        \"\"\"Build a network that maps state -> action values.\"\"\"\n","        x = F.relu(self.fc1(state))\n","        x = F.relu(self.fc2(x))\n","        return self.fc3(x)"],"metadata":{"id":"aBkmHYqw3KPF","executionInfo":{"status":"ok","timestamp":1678745680843,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":86,"outputs":[]},{"cell_type":"markdown","source":["## Agent"],"metadata":{"id":"ad16n6GO3PG7"}},{"cell_type":"code","source":["import numpy as np\n","import random\n","from collections import namedtuple, deque\n","\n","import torch\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","BUFFER_SIZE = int(1e5)  # replay buffer size\n","# BATCH_SIZE = 64         # minibatch size\n","BATCH_SIZE = 2         # minibatch size\n","GAMMA = 0.99            # discount factor\n","TAU = 1e-3              # for soft update of target parameters\n","LR = 5e-4               # learning rate \n","# UPDATE_EVERY = 4        # how often to update the network\n","UPDATE_EVERY = 1       # how often to update the network\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","class Agent():\n","    \"\"\"Interacts with and learns from the environment.\"\"\"\n","\n","    def __init__(self, state_size, action_size, seed):\n","        \"\"\"Initialize an Agent object.\n","        \n","        Params\n","        ======\n","            state_size (int): dimension of each state\n","            action_size (int): dimension of each action\n","            seed (int): random seed\n","        \"\"\"\n","        self.state_size = state_size\n","        self.action_size = action_size\n","        self.seed = random.seed(seed)\n","\n","        # Q-Network\n","        self.qnetwork_local = QNetwork(state_size, action_size, seed).to(device)\n","        self.qnetwork_target = QNetwork(state_size, action_size, seed).to(device)\n","        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=LR)\n","\n","        # Replay memory\n","        self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed)\n","        # Initialize time step (for updating every UPDATE_EVERY steps)\n","        self.t_step = 0\n","    \n","    def step(self, state, action, reward, next_state, done):\n","        # Save experience in replay memory\n","        # print(\"Add to memory : \", state, action, next_state, reward)\n","        self.memory.add(state, action, reward, next_state, done)\n","        \n","        # Learn every UPDATE_EVERY time steps.\n","        self.t_step = (self.t_step + 1) % UPDATE_EVERY\n","        if self.t_step == 0:\n","            # If enough samples are available in memory, get random subset and learn\n","            if len(self.memory) > BATCH_SIZE:\n","                experiences = self.memory.sample()\n","                self.learn(experiences, GAMMA)\n","\n","    def act(self, env, state, eps=0.):\n","        \"\"\"Returns actions for given state as per current policy.\n","        \n","        Params\n","        ======\n","            state (array_like): current state\n","            eps (float): epsilon, for epsilon-greedy action selection\n","        \"\"\"\n","        node_state = state[: -1 ]\n","        valid_action = []\n","        for i in range(len(node_state)):\n","            if(node_state[i] == 0 and env.cost[i] <= env.max_budget):\n","                valid_action.append(True)\n","            else:\n","                valid_action.append(False)\n","\n","        valid_action_arg = []\n","        for i in range(len(valid_action)):\n","            if valid_action[i] == True:\n","                valid_action_arg.append(i)\n","\n","\n","        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n","        self.qnetwork_local.eval()\n","        with torch.no_grad():\n","            action_values = self.qnetwork_local(state)\n","            # print(\"training local model\", state, action_values)\n","        self.qnetwork_local.train()\n","\n","        mn = -1e9\n","        for i in range(len(valid_action)):\n","            if(valid_action[i] == False):\n","                action_values[0][i] = mn\n","\n","        # print(\"action_values\", action_values)\n","        # print(\"valid_idx\", valid_action_arg)\n","        \n","        # Epsilon-greedy action selection\n","        if random.random() > eps:\n","            # picks action with maximum value attached to it \n","            choice = np.argmax(action_values.cpu().data.numpy())\n","            if choice == mn : \n","                return -1\n","\n","            # print(\"non greedy : \", choice)\n","            return choice\n","        else:\n","            # randomly pick any action from the values that are not already chosen \n","            # return random.choice(np.arange(self.action_size))\n","            if len(valid_action_arg) == 0 :\n","                return -1\n","                \n","            choice = random.choice(valid_action_arg)\n","            # print(\"greedy : \", choice)\n","            return choice\n","\n","    def learn(self, experiences, gamma):\n","        \"\"\"Update value parameters using given batch of experience tuples.\n","\n","        Params\n","        ======\n","            experiences (Tuple[torch.Tensor]): tuple of (s, a, r, s', done) tuples \n","            gamma (float): discount factor\n","        \"\"\"\n","        states, actions, rewards, next_states, dones = experiences\n","        # print(\"states\", states)\n","        # print(\"actions\", actions)\n","        # print(\"rewards\", rewards)\n","        # print(\"next_states\", next_states)\n","        # print(\"dones\", dones)\n","              \n","\n","        # Get max predicted Q values (for next states) from target model\n","        # print(\"0 (next_states) : \", (next_states), type(next_states))\n","        # print(\"1 self.qnetwork_target(next_states) : \", self.qnetwork_target(next_states), print(type(self.qnetwork_target(next_states))))\n","        # print(\"2 self.qnetwork_target(next_states).detach() : \", self.qnetwork_target(next_states).detach())\n","        # print(\"2.5 self.qnetwork_target(next_states).detach().max() : \", self.qnetwork_target(next_states).detach().max())\n","        # print(\"3  self.qnetwork_target(next_states).detach().max(1) : \", self.qnetwork_target(next_states).detach().max(1))\n","        # print(\"4 self.qnetwork_target(next_states).detach().max(1)[0] : \", self.qnetwork_target(next_states).detach().max(1)[0])\n","        # print(\"5 self.qnetwork_target(next_states).detach().max(1)[0].unsqueeze(1) : \", self.qnetwork_target(next_states).detach().max(1)[0].unsqueeze(1))\n","        Q_targets_next = self.qnetwork_target(next_states).detach().max(1)[0].unsqueeze(1)\n","        # Compute Q targets for current states \n","        Q_targets = rewards + (gamma * Q_targets_next * (1 - dones))\n","\n","        # Get expected Q values from local model\n","        # print(\"0 self.qnetwork_local(states)\", self.qnetwork_local(states))\n","        # print(\"1 self.qnetwork_local(states).gather(1, actions)\", self.qnetwork_local(states).gather(1, actions))\n","        \n","        Q_expected = self.qnetwork_local(states).gather(1, actions)\n","\n","        # Compute loss\n","        loss = F.mse_loss(Q_expected, Q_targets)\n","        # Minimize the loss\n","        self.optimizer.zero_grad()\n","        loss.backward()\n","        self.optimizer.step()\n","\n","        # ------------------- update target network ------------------- #\n","        self.soft_update(self.qnetwork_local, self.qnetwork_target, TAU)                     \n","\n","    def soft_update(self, local_model, target_model, tau):\n","        \"\"\"Soft update model parameters.\n","        θ_target = τ*θ_local + (1 - τ)*θ_target\n","\n","        Params\n","        ======\n","            local_model (PyTorch model): weights will be copied from\n","            target_model (PyTorch model): weights will be copied to\n","            tau (float): interpolation parameter \n","        \"\"\"\n","        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n","            target_param.data.copy_(tau*local_param.data + (1.0-tau)*target_param.data)\n","\n","\n","class ReplayBuffer:\n","    \"\"\"Fixed-size buffer to store experience tuples.\"\"\"\n","\n","    def __init__(self, action_size, buffer_size, batch_size, seed):\n","        \"\"\"Initialize a ReplayBuffer object.\n","\n","        Params\n","        ======\n","            action_size (int): dimension of each action\n","            buffer_size (int): maximum size of buffer\n","            batch_size (int): size of each training batch\n","            seed (int): random seed\n","        \"\"\"\n","        self.action_size = action_size\n","        self.memory = deque(maxlen=buffer_size)  \n","        self.batch_size = batch_size\n","        self.experience = namedtuple(\"Experience\", field_names=[\"state\", \"action\", \"reward\", \"next_state\", \"done\"])\n","        self.seed = random.seed(seed)\n","    \n","    def add(self, state, action, reward, next_state, done):\n","        \"\"\"Add a new experience to memory.\"\"\"\n","        e = self.experience(state, action, reward, next_state, done)\n","        self.memory.append(e)\n","    \n","    def sample(self):\n","        \"\"\"Randomly sample a batch of experiences from memory.\"\"\"\n","        experiences = random.sample(self.memory, k=self.batch_size)\n","\n","        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(device)\n","        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(device)\n","        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(device)\n","        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(device)\n","        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(device)\n","  \n","        return (states, actions, rewards, next_states, dones)\n","\n","    def __len__(self):\n","        \"\"\"Return the current size of internal memory.\"\"\"\n","        return len(self.memory)"],"metadata":{"id":"H3b4yeDgoNak","executionInfo":{"status":"ok","timestamp":1678745680844,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":87,"outputs":[]},{"cell_type":"markdown","source":["## Environment"],"metadata":{"id":"aU9M6sGe_L-3"}},{"cell_type":"code","source":["import torch\n","import dgl\n","from collections import namedtuple\n","import dgl.function as fn\n","from copy import deepcopy as dc\n","import random\n","import time\n","from time import time\n","from torch.utils.data import DataLoader\n","import numpy as np\n","from collections import deque\n","\n","class IM(object):\n","    def __init__(self, max_budget, p, num_nodes, cost):\n","        self.max_budget = max_budget\n","        self.BUDGET = max_budget\n","        assert(p <= 1 and p >= 0)\n","        self.p = p\n","        self.num_nodes = num_nodes\n","        self.cost = cost\n","\n","    def compute_reward(self, state):\n","        # reward is the number of additional nodes influenced\n","        reward = 0\n","        # each node has one chance to influence each neighbour\n","        # print(state)\n","        new_influenced = state.detach().cpu().numpy().ravel()\n","        # print(new_influenced)\n","        tot_influenced = state.detach().cpu().numpy().ravel()\n","        while((new_influenced == 1).sum() >= 1):\n","            # next = torch.full(\n","            #     (self.num_nodes, 1),\n","            #     0, \n","            #     dtype = torch.long\n","            #     )\n","            next = np.zeros(self.num_nodes)\n","            for e in range(self.g.number_of_edges()):\n","                # print(new_influenced[self.g.edges()[0][e]])\n","                if((new_influenced[self.g.edges()[0][e]] == 1) and \n","                   not(tot_influenced[self.g.edges()[1][e]] == 1 or new_influenced[self.g.edges()[1][e]] == 1)):\n","                    r = random.random()\n","                    if(r < self.p):\n","                        # node influenced\n","                        next[self.g.edges()[1][e]] = 1\n","                        reward += 1\n","            # print(new_influenced)\n","            tot_influenced = tot_influenced + new_influenced\n","            new_influenced = next\n","        return reward\n","     \n","    def step(self, action):\n","        reward, sol, done = self._take_action(action)\n","        \n","        ob = self._build_ob()\n","        self.sol = sol\n","        info = {\"sol\": self.sol}\n","\n","        # need to convert ob to ndarray from tensor\n","        ob = ob.detach().cpu().numpy().ravel()\n","        next_state = np.copy(ob)\n","        return next_state, reward, done, info\n","    \n","    def _take_action(self, action):\n","        r1, r2 = 0, 0\n","        num_iter = 100\n","        for i in range(num_iter):\n","            r1 += self.compute_reward(self.x[:-1])\n","        if(self.x[action] == 0 and self.cost[action] <= self.max_budget):\n","            self.x[action] = 1\n","            self.x[-1] -= self.cost[action]\n","            self.max_budget -= self.cost[action]\n","        # write code for else case \n","        next_sol = 0\n","        for i in range(num_iter):\n","            r2 += self.compute_reward(self.x[:-1])\n","        done = self._check_done()\n","        return (r2 - r1)/num_iter, next_sol, done\n","\n","    def _check_done(self): \n","        inactive = (self.x[:-1] == 0).type(torch.float)\n","        # print(inactive)\n","        self.g.ndata['h'] = inactive\n","        not_selected = dgl.sum_nodes(self.g, 'h')\n","        self.g.ndata.pop('h')\n","        done = (not_selected == 0) or (self.max_budget <= 0)\n","        return done\n","                \n","    def _build_ob(self):\n","        ob_x = self.x\n","        # ob = torch.cat([ob_x], dim = 2)\n","        # return ob\n","        return ob_x\n","    \n","    # using num_samples = 1 as of now \n","    def register(self, g, num_samples = 1):\n","        self.g = g\n","        self.g.set_n_initializer(dgl.init.zero_initializer)\n","        t = torch.full((self.num_nodes, 1), 0, dtype=torch.float16)\n","        # torch.full(\n","            #     (self.num_nodes, 1),\n","            #     0, \n","            #     dtype = torch.long\n","            #     )\n","        self.x = torch.cat((t, torch.tensor([[self.max_budget]])), 0)\n","        ob = self._build_ob()\n","        return ob\n","\n","\n","    def reset(self):\n","        state = np.zeros(self.num_nodes + 1)\n","        state[-1] = self.BUDGET\n","\n","        t = torch.full((self.num_nodes, 1), 0, dtype=torch.float16)\n","        self.max_budget = self.BUDGET\n","        self.x = torch.cat((t, torch.tensor([[self.max_budget]])), 0)\n","\n","        return np.array(state)"],"metadata":{"id":"wLjmVoem_Lap","executionInfo":{"status":"ok","timestamp":1678745680844,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":88,"outputs":[]},{"cell_type":"markdown","source":["## Main "],"metadata":{"id":"vncLgXZQ_j18"}},{"cell_type":"code","source":["import copy\n","\n","cost = torch.tensor([300, 300, 300, 300, 300, 300, 300])\n","maxb = 1500\n","\n","src_ids = torch.tensor([0, 1, 2, 3])\n","dst_ids = torch.tensor([1, 2, 3, 4])\n","\n","n_nodes = 7\n","n_edges = 15\n","\n","env = IM(maxb, 0.6, n_nodes, cost)\n","g = dgl.rand_graph(n_nodes, n_edges)\n","# g = dgl.graph((src_ids, dst_ids), num_nodes=5)\n","\n","ob = env.register(g)\n","\n","env_greedy = copy.deepcopy(env)\n","\n","print(ob)\n","# obnext, reward, done, info = env.step(3)\n","# print(obnext, reward, done, info)\n","# obnext, reward, done, info = env.step(3)\n","# print(obnext, reward, done, info)\n","# obnext, reward, done, info = env.step(3)\n","# print(obnext, reward, done, info)\n","\n","################################################################################\n","\n","agent = Agent(state_size=env.num_nodes + 1, action_size=env.num_nodes, seed=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IVM_MOc97k_-","executionInfo":{"status":"ok","timestamp":1678745680844,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"outputId":"e8a8d241-651f-4621-ea87-77be0da3deab"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[   0.],\n","        [   0.],\n","        [   0.],\n","        [   0.],\n","        [   0.],\n","        [   0.],\n","        [   0.],\n","        [1500.]], dtype=torch.float16)\n"]}]},{"cell_type":"markdown","source":["### dqn"],"metadata":{"id":"tlTr-Dwc6lqk"}},{"cell_type":"code","source":["def dqn(n_episodes=2000, max_t=1000, eps_start=1.0, eps_end=0.01, eps_decay=0.995):\n","    \"\"\"Deep Q-Learning.\n","    \n","    Params\n","    ======\n","        n_episodes (int): maximum number of training episodes\n","        max_t (int): maximum number of timesteps per episode\n","        eps_start (float): starting value of epsilon, for epsilon-greedy action selection\n","        eps_end (float): minimum value of epsilon\n","        eps_decay (float): multiplicative factor (per episode) for decreasing epsilon\n","    \"\"\"\n","    scores = []                        # list containing scores from each episode\n","    scores_window = deque(maxlen=100)  # last 100 scores\n","    eps = eps_start                    # initialize epsilon\n","    for i_episode in range(1, n_episodes+1):\n","        state = env.reset()\n","        score = 0\n","        for t in range(max_t):\n","            action = agent.act(env, state, eps)\n","            if action == -1:\n","                # print(\"**********done**********\\n\")\n","                break \n","            next_state, reward, done, _ = env.step(action)\n","            # print(\"environments step : \", state, action, next_state, reward)\n","            agent.step(state, action, reward, next_state, done)\n","            state = next_state\n","            score += reward\n","            if done:\n","                # print(\"**********done**********\\n\")\n","                break \n","\n","        # print(\"~~~~~~~~~~end of time~~~~~~~~~~\\n\")\n","        scores_window.append(score)       # save most recent score\n","        scores.append(score)              # save most recent score\n","        eps = max(eps_end, eps_decay*eps) # decrease epsilon\n","        print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores_window)), end=\"\")\n","        if i_episode % 10 == 0:\n","            print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores_window)))\n","        if np.mean(scores_window)>=200.0:\n","            print('\\nEnvironment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n","            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint.pth')\n","            break\n","    return scores\n","\n","scores = dqn(50)"],"metadata":{"id":"TceR8SAo7Gw6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678745879306,"user_tz":-330,"elapsed":198468,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"outputId":"87b61ec4-8754-4e55-d17f-70cbbc148fc3"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Episode 10\tAverage Score: 3.03\n","Episode 20\tAverage Score: 3.24\n","Episode 30\tAverage Score: 3.22\n","Episode 40\tAverage Score: 3.18\n","Episode 50\tAverage Score: 3.15\n"]}]},{"cell_type":"code","source":["score1_avg = np.mean(scores)\n","score1_mx = np.max(scores) "],"metadata":{"id":"RZ2ljAM1B3LQ","executionInfo":{"status":"ok","timestamp":1678745879307,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["# plot the scores\n","fig = plt.figure()\n","ax = fig.add_subplot(111)\n","plt.plot(np.arange(len(scores)), scores)\n","plt.ylabel('Score')\n","plt.xlabel('Episode #')\n","plt.show()"],"metadata":{"id":"R6t_HlnH7zLo","executionInfo":{"status":"ok","timestamp":1678745879307,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"colab":{"base_uri":"https://localhost:8080/","height":0},"outputId":"a2b33e4e-06e6-4957-972f-4fd4542ce3dc"},"execution_count":92,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### greedy"],"metadata":{"id":"TCzw9C5zfvfI"}},{"cell_type":"code","source":["np.full(5, 7)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wrm94OrWhon7","executionInfo":{"status":"ok","timestamp":1678745879307,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"outputId":"7afbb151-2cdb-4bb8-ddcd-1491bb8389f7"},"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([7, 7, 7, 7, 7])"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["mn = -1e9\n","env = copy.deepcopy(env_greedy)\n","def greedy():\n","    score = 0\n","    n = env.num_nodes\n","    while True:\n","        reward_per_cost = np.full(n, mn)\n","\n","        done = False\n","        for i in range(n):\n","            temp = copy.deepcopy(env)\n","            if env.x[i] == 0 and env.cost[i] <= env.max_budget :\n","                _, reward, _, _ = temp.step(i)\n","                reward_per_cost[i] = reward / temp.cost[i]\n","            \n","        choice = np.argmax(reward_per_cost)\n","        if reward_per_cost[choice] == mn:\n","            break\n","\n","        print(\" reward_per_cost : \", reward_per_cost)\n","        print(\"choice : \", choice)\n","        \n","        _, reward, done, _ = env.step(choice)\n","        print(env.x, env.max_budget)\n","        score += reward\n","\n","        if done == True:\n","            break\n","\n","    return score\n","\n","\n","score2 = greedy()"],"metadata":{"id":"JK5_T9tFfsy-","executionInfo":{"status":"ok","timestamp":1678745903796,"user_tz":-330,"elapsed":24497,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1f405d25-f6dd-4ca6-8f05-abfe578e38d5"},"execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":[" reward_per_cost :  [0.00383333 0.00906667 0.01073333 0.00406667 0.00673333 0.00416667\n"," 0.0077    ]\n","choice :  2\n","tensor([[0.0000e+00],\n","        [0.0000e+00],\n","        [1.0000e+00],\n","        [0.0000e+00],\n","        [0.0000e+00],\n","        [0.0000e+00],\n","        [0.0000e+00],\n","        [1.2000e+03]], dtype=torch.float16) tensor(1200)\n"," reward_per_cost :  [ 3.33333337e-05  2.16666656e-03 -1.00000000e+09  4.60000010e-03\n","  5.53333340e-03  3.16666672e-03  4.53333370e-03]\n","choice :  4\n","tensor([[  0.],\n","        [  0.],\n","        [  1.],\n","        [  0.],\n","        [  1.],\n","        [  0.],\n","        [  0.],\n","        [900.]], dtype=torch.float16) tensor(900)\n"," reward_per_cost :  [-1.16666663e-03 -2.49999994e-03 -1.00000000e+09  1.30000000e-03\n"," -1.00000000e+09  1.20000006e-03 -1.33333335e-04]\n","choice :  3\n","tensor([[  0.],\n","        [  0.],\n","        [  1.],\n","        [  1.],\n","        [  1.],\n","        [  0.],\n","        [  0.],\n","        [600.]], dtype=torch.float16) tensor(600)\n"," reward_per_cost :  [-2.60000001e-03 -1.26666669e-03 -1.00000000e+09 -1.00000000e+09\n"," -1.00000000e+09 -3.33333337e-05 -6.33333344e-04]\n","choice :  5\n","tensor([[  0.],\n","        [  0.],\n","        [  1.],\n","        [  1.],\n","        [  1.],\n","        [  1.],\n","        [  0.],\n","        [300.]], dtype=torch.float16) tensor(300)\n"," reward_per_cost :  [-3.03333346e-03 -2.70000007e-03 -1.00000000e+09 -1.00000000e+09\n"," -1.00000000e+09 -1.00000000e+09 -9.99999975e-05]\n","choice :  6\n","tensor([[0.],\n","        [0.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [1.],\n","        [0.]], dtype=torch.float16) tensor(0)\n"]}]},{"cell_type":"code","source":["print(print(g.nodes()))\n","print(print(g.edges()))\n","\n","print(\"dqn\", score1_avg, score1_mx)\n","print(\"greedy\", score2)"],"metadata":{"id":"xUi9IroyrME_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1678745903797,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}},"outputId":"ea0a68c1-6fb9-4834-a397-bdd2f812a54f"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0, 1, 2, 3, 4, 5, 6])\n","None\n","(tensor([4, 1, 5, 1, 6, 0, 4, 3, 1, 5, 1, 6, 0, 2, 2]), tensor([1, 6, 3, 1, 6, 0, 4, 0, 0, 5, 5, 4, 5, 0, 1]))\n","None\n","dqn 3.1454000000000004 5.43\n","greedy 4.48\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"6w4jFlnthKxM","executionInfo":{"status":"ok","timestamp":1678745903797,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sanchit Sinha","userId":"03766366414454501043"}}},"execution_count":95,"outputs":[]}]}